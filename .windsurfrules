---
description: Global rules always followed
globs: 
alwaysApply: true
---
# Vibe Coding Starter Pack: 3D Multiplayer - Technical Guide

This document describes the architecture, setup, workflow, and key development patterns for the Vibe Coding Starter Pack 3D Multiplayer project.

## 1. Project Overview

*   **Goal:** Provide a foundation for building 3D multiplayer web games using SpacetimeDB as the backend.
*   **Backend:** SpacetimeDB module written in Rust (`server/`). Handles game logic, state management, and data persistence.
*   **Frontend:** Client application built with Vite, React, TypeScript, and React Three Fiber (`client/`). Connects to SpacetimeDB, subscribes to data, calls reducers, and renders the game state.

## 2. Game Architecture

The starter pack uses a modular, component-based architecture with the following core systems:

1. **Core Game Loop**: Managed in `client/src/App.tsx`, which initializes all components and runs the update cycle
2. **Rendering System**: Handled by Three.js via React Three Fiber with scene setup in `client/src/components/GameScene.tsx`
3. **Character System**: Player controls and animations in `client/src/components/Player.tsx`
4. **UI System**: HUD elements and feedback in `client/src/components/PlayerUI.tsx` and `client/src/components/DebugPanel.tsx`
5. **Multiplayer System**: Client-server communication in `client/src/App.tsx` and server-side code in `server/src/` directory

## 3. Core SpacetimeDB Concepts Used

*   **Tables:** Relational data storage defined as Rust structs with `#[spacetimedb::table]`. Key tables include `player` and `logged_out_player`. Tables must be marked `public` for client access. Table names used in client SQL subscriptions are **case-sensitive** and must match the `name = "..."` attribute exactly (e.g., `name = "player"` requires `SELECT * FROM player`).
*   **Reducers:** Atomic, transactional Rust functions (`#[spacetimedb::reducer]`) that modify table state. Triggered by client calls or internal events. Key reducers: `register_player`, `update_player_input`, lifecycle reducers (`identity_connected`, `identity_disconnected`), update reducers (`update_players`).
*   **Subscriptions:** Clients subscribe to SQL queries (e.g., `SELECT * FROM player`) using the `SubscriptionBuilder` to receive initial data and real-time updates for specific tables.
*   **Generated Bindings:** The `spacetime generate` command creates TypeScript code (`client/src/generated/`) based on the Rust module's schema, providing type-safe access to tables, reducers, and types on the client.
*   **Identity:** Represents a unique, authenticated user (`ctx.sender` in reducers, `conn.identity` on client). Used as the primary key for player-related tables.

## 4. Prerequisites

1.  **Rust & Cargo:** ([https://rustup.rs/](mdc:https:/rustup.rs))
    *   Install: `curl https://sh.rustup.rs -sSf | sh`
    *   Add WASM target: `rustup target add wasm32-unknown-unknown`
    *   Ensure `~/.cargo/bin` is in PATH (restart terminal or `source ~/.cargo/env`).
2.  **SpacetimeDB CLI (v1.0.1):** ([https://install.spacetimedb.com](mdc:https:/install.spacetimedb.com))
    *   Install: `curl -sSf https://install.spacetimedb.com | sh`
    *   Ensure install location (e.g., `~/.local/bin`) is in PATH (restart terminal or `source ~/.zshrc`/`.bashrc`).
    *   Verify: `spacetime --version` (Must match exact server version, e.g., `1.0.1`).
3.  **Node.js & npm:** ([https://nodejs.org/](mdc:https:/nodejs.org)) (LTS recommended).
4.  **(Optional) `wasm-opt`:** For optimizing the built Rust module (part of `binaryen`). Install via system package manager (e.g., `brew install binaryen`, `apt install binaryen`). If missing, builds will still work but show a warning.

## 5. Project Structure

## 5. Project Structure

```
vibe-coding-starter-pack-3d-multiplayer/
├── client/ # Vite+React+TS client
│   ├── public/
│   │   ├── models/ # 3D models and animations
│   ├── src/
│   │   ├── assets/
│   │   ├── components/ # React components (DebugPanel, GameScene, Player)
│   │   ├── generated/  # Auto-generated TS bindings
│   │   ├── App.css     # Component styles
│   │   ├── App.tsx     # Main React component
│   │   ├── index.css   # Global styles/resets
│   │   └── main.tsx    # React entry point
│   ├── index.html
│   ├── package.json
│   ├── tsconfig.json   # Main TS config
│   ├── tsconfig.app.json # App-specific TS config (used by Vite)
│   └── vite.config.ts
├── server/   # SpacetimeDB Server Module (Rust)
│   ├── src/
│   │   ├── common.rs
│   │   ├── player_logic.rs
│   │   └── lib.rs      # Main server module file
│   ├── Cargo.toml
│   └── target/
├── setup.sh            # Set up script
└── README.md           # Project overview
``` 

